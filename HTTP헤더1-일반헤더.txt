HTTP 헤더1
    ->  HTTP에 전송에 필요한 모든 부가정보
        ->  메시지바디의 내용, 메시지 바디의 크기,압축,인증, 요청 클라이언트, 서버정보, 캐시관리정보,

    ->  표준 헤더가 굉장히 많다.
    -> 필요시 임의의 헤더 추가가능


    헤더 분류
        RFC2616(과거:1999년,현재는 폐기됨.)
        ->  General 헤더: 메시지 전체에 적용되는정보 예) Connection: close
            Request 헤더: 요청 정보 예) User-Agent: Mozilla/5.0 (Macintosh; ..)
            Response 헤더: 응답 정보 예) Server: Apache
            Entity 헤더: 엔티티 바디 정보 예) Content-Type: text/html, Content-Length: 3423
        
        
        RFC7230~7235(2014년 등장)
        ->  엔티티(Entity) -> Represintation(표현) 단어가 변경
            표현 = 표현 메타데이터 + 표현 데이터
        
            메시지 본문을 통해 표현 데이터를 전달
            메시지 본문 = 페이로드(payload)
            표현은 요청이나 응답에서 전달할 실제 데이터
            표현헤더는 표현 데이터를 해석할 수 있는 정보 제공
                데이터 유형(html, json), 데이터 길이 , 압축 정보 등등
            참고 : 표현 헤더는 표현 메타데이와, 페이로드 메시지를 구분해야 하지만 여기서는 생략

    
    표현

        Content-Type: 표현 데이터의 형식
        Content-Encoding: 표현 데이터의 압축 방식
        Content-Language: 표현 데이터의 자연 언어
        Content-Length: 표현 데이터의 길이


        표현헤더는 전송 응답을 둘다 사용
    

        Content-Type
                ex) Content-Type: text/html;charset=UTF-8
            ->  표현 데이터의 형식 설명
                미디어 타입, 문자인코딩
                예)
                    text/html; charset=uft-8
                    application/json
                    image/png

        Content-Encoding
                ex) Content-Encoding: gzip
            ->  표현 데이터 인코딩

                표현 데이터를 압축하기 위해 사용
                데이터를 전달하는 곳에서 압축후 인코딩 헤더 추가
                데이터를 읽은 쪽에서 인코딩 헤더의 정보로 압축해제

                예)
                    gzip
                    deflate
                    identity(압축안한다는 뜻)

        Content-Language
                ex) Content-Language: ko
            ->  표현 데이터의 자연언어
                표현 데이터의 자연언어를 표현
                예)
                    ko
                    en
                    en-US
        Content-Length
                ex) Content-Length: 5
            ->  표현 데이터의 길이
                바이트 단위
                Transfer-Encoding(전송 코딩)을 사용하면 Content-Length를 사용하면 안됨.(Transfer-Encoding안에 다 들어있기때문에)

    
    협상(콘텐츠 네고시에이션)
        ->  클라이언트가 선호하는 표현 요청

            Accept: 클라이언트가 선호하는 미디어 타입 전달
            Accept-Charset: 클라이언트가 선호하는 문자 인코딩
            Accept-Encoding: 클라이언트가 선호하는 압축 인코딩
            Accept-Language: 클라이언트가 선호하는 자연 언어

            협상 헤더는 요청시에만 사용 
        
        예제 ) Accept-Language 적용 전


        클라이언트                                                                          서버
        /event                              -> GET /event                               다중언어 지원서버
                                            
                                            Content-Language: en  <-                    1.  기본 영어
                                                                                        2. 한국어 지원
        한국어 브라우저 사용                hello


                예제 ) Accept-Language 적용 후


        클라이언트                                                                          서버
        /event                              -> GET /event                               다중언어 지원서버
                                            Accept-Language: ko
                                            Content-Language: ko  <-                    1.  기본 독일어
                                                                                        2. 한국어 지원
        한국어 브라우저 사용                안녕하세요


                        예제 ) Accept-Language 적용 복잡한 예시


        클라이언트                                                                          서버
        /event        -> GET /event                                                     다중언어 지원서버
                      Accept-Language: ko
                                                            Content-Language: de  <-     1. 기본 독일어(de)
                                                                                         2. 한국어 지원
        한국어 브라우저 사용                                Hallo(독일어)
            -> 서버 : "영어도아니고 한국어네 , 난 지원안하니까 독일어로 보내줄게"
                -> 우선순위개념 
        
        협상과 우선순위1
            ->  Quality values(q)값 사용
                0~1, 클수록 높은 우선순위           GET /event
                                                    Accept-LanguageL ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
                                                    
                 Ko-KR;q=1 (q생략)
                 ko;q=0.9
                 en-US;q=0.8
                 en;q=0.7

                GET /event
                Accept-LanguageL ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7

                ->복잡한예시에서 서버가 "얘는 독일어보단 영어를 선호하네? 영어로 보내줄게" 라고 알아듣는다

        협상과 우선순위2
            ->  구체적인 것이 우선한다 
                Accept: text/* , text/plain, text/plain;format=flowed, */*

                1. text/plain;format=flowed
                2. text/plain
                3. text/*
                4. */*
        협상과 우선순위3

            ->  구체적인 것을 기준으로 미디어 타입을 맞춘다.
                Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4 */*;q=0.5 
        
        전송방식
            단순 전송
            압축 전송
            분할 전송
            범위 전송

            단순 전송
                ->  Content에 대한 길이를 다 알고있을때 한번에 요청하고 한번에 다 쭈우우욱 전송
                ->  Content-Length: 3423

            압축 전송
                ->  서버에서 메시지바디의 내용(ex : html)을 gzip등으로 압축해서 전송
                ->  Content-Encoding: gzip

            분할 전송
                ->  Transfer-Encoding: chunked //chunked = 덩어리
                ->  5
                    Hello
                    5
                    World
                    0
                    \r\n
                -> 잘랐을때 분할해서 오는대로 바로바로 표시가능, Content-Length가 예상이 안되기때문에 Content-Length 헤더는 넣으면 안된다!
            
            범위 전송
                ->  클라이언트 요청 :   GET /event
                                        Range: bytes=1001-2000  요청 ( 1001-2000못받았어요) 
                ->  서버 응답
                    Content-Range: bytes 1001-2000 / 2000       ( 드림 )
            
        
        일반 정보 헤더
            From: 유저 에이전트의 이메일정보
            Referer: 이전 웹 페이지 주소
            User-Agent: 유저 에이전트 애플리케이션 정보
            Server: 요청을 처리하는 오리진 서버의 소프트웨어 정보
            Date: 메시지가 생성된 날짜


            From
                유저 에이전트의 이메일정보
                    일반적으로 잘 사용되지 않음
                    검색 엔진 같은 곳에서, 주로사용
                    요청에서 사용

            Referer
                이전 웹페이지 주소
                    현재 요청된 페이지의 이전 웹페이지 주소
                    A->B로 이동하는 경우 B를 요청할때 Referer: A를 포함해서 요청
                    Referer를 사용해서 유입경로 분석가능
                    요청에서 사용

                참고: referer는 단어 referrer의오타

            User-Agent
                유저, 클라이언트의 애플리케이션 정부( 웹브라우저 정보 등등)
                통계 정보
                어떤 종류의 브라우저에서 장애가 발생하는지 파악 가능
                요청에서 사용

            Server
                요청을 처리하는 ORIGIN서버(HTTP요청을 보내면 여러 프록시 서버를 거치는데, 나의 실제 요청이 도착하는 끝에있는 그 서버가 ORIGIN서버)의 소프트웨어 정보
                응답에서 사용
                Server: Apache/2.2.22 (Debian)
                server: nginx
                응답에서 사용

            Date
                메시지가 발생한 날짜와 시간
                Date: Tue, 15 Nov 1994 08:12:31 GMT
                응답에서 사용

        특별한 정보 헤더
            Host :요청한 호스트정보(도메인)
            Location : 페이지 리다이렉션
            Allow : 허용가능한 HTTP메서드
            Retry-After : 유저 에이전트가 다음요청을 하기까지 기다려야 하는시간

            Host
                요청에서사용
                필수
                하나의 서버가 여러 도메인을 처리해야할때
                    ->  IP: 200.200.200.2 가상 호스트를 통해 여러 도메인을 한번에 처리할 수 있는 서버 실제 애플리케이션이 여러개 구동될수있다.
                            IP통신에서 Host헤더필더가 없으면 aaa.com, bbb.com, ccc.com의 구분이 안됨
                            그래서 필수
                하나의 IP주소에 여러 도메인이 적용되어 있을 때
                Host: www.google.com

            Location
                웹브라우저는 3xx응답의 결과에 Location헤더가 있으면, location위치로 자동 이동(리다이렉트)
                응답코드 3xx에서 설명
                201 Created : Lcation값은 요청에 의해 생성된 리소스 URI
                3xx (Redirection) : Lcation 값은  요청을 자동으로 리디렉션 하기위한 대상 리소스를 가리킴
            
            Allow
                405(Method Not Allowed) 에서 응답에 포함해야함
                Allow: GET, HEAD, PUT
            
            Retry-After

                503 (Service Unavailable): 서비스가 언제까지 불능인지 알려줄수있음
                Retry-After: Fri, 31 Dec 1999 23:59:59 GMT (날짜표기)
                Retry-After: 120(초단위 표기)

        인증 헤더
            Authorization: 클라이언트의 인증저보를 서버에 전달
            WWW-Authenticate: 리소스 접근시 필요한 인증 방법 정의

            Authorization
                Authorization: Basic xxxxxxxxxxxxxxx
                    -> OAUTH인증 공부해보기 ~ 다 다름 ~
            WWW-Authenticate
                리소스 접근시 필요한 인증 방법 정의
                401 Unauthorized응답과 함께 사용
                WWW-Authenticate: : Newauth realm="apps", type=1, title="Login to \"apps\"", Basic realm="simple"
                    -> 이런 정보들을 참고해서 제대로된 인증정보를 만들어! 라고 서버에서 클라이언트로 반환

        쿠키
            Set-Cookie : 서버에서 클라이언트로 쿠키 전달( 응답 )
            Cookie : 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP요청시 서버로 전달

            예시 ) 쿠키 미사용

                            -> GET /welcome HTTP/1.1                            
                                                                        <- HTTP/1.1 200 OK
                                                                           안녕하세요 손님
            
            
            웹브라우저      -> GET /login HTTP/1.1
                               user=홍길동                                   서버
                                                            <-        HTTP/1.1 200 OK
                                                                      홍길동 님이 로그있했습니다.

                            
                            -> GET /welcome HTTP/1.1                            
                                                                        <- HTTP/1.1 200 OK
                                                                           안녕하세요 "손님"

            -> 서버가 이전 요청을 기억하지못한다 ㅠ(난 안녕하세요 홍길동님을 기대했는데..서버: "니가 누군데")

            대안 : 모든 요청과 링크에 사용자 정보를 포함한다 //..이건 보안에 문제가있고 힘들거같은데요..


            예시 ) 쿠키 사용
                로그인

                POST /login HTTP/1.1
                user=홍길동                 ->                              
                                                            <-  HTTP/1.1 200 OK
                                                                Set-Cookie: user=홍길동  (Key/value의 값을 쿠키로 보냄)

                                                                홍길동님이 로그인했습니다

            웹브라우저의 쿠키저장소 : user=홍길동 저장
            웹브라우저는 해당서버에 요청을 보낼때마다 무조건 쿠키저장소를 뒤진다
                쿠키값을 무조건 꺼내서 헤더에 넣어서 보냄
                GET /welcome HTTP/1.1
                Cookie: user=홍길동                    

            서버 : "아 안녕하세요 홍길동님"
            

            쿠키
                예) set-cookie: sessionId=abcde1234; expires=Sat, 26-Dec-2020 00:00:00 GMT; path=/; domain=.google.com; Secure
                                (세션아이디생성)     (쿠키만료시간)                     (이런경로허용) (아 이런 도메인에 허용) (아 먼가 쿠키의 보안정보구나)
                사용처
                    사용자 로그인 세션 관리
                    광고 정보 트래킹
                쿠키 정보는 항상 서버에 전송됨
                    네트워크 트래픽 추가 유발
                    최소한의 정보만 사용 ( 세션 id , 인증 토큰)
                    서버에 전송하지않고, 웹브라우저 내부에 데이터를 저장하고 싶으면 웹스토리지(localStorgae, sessionStorage)참고
                ※주의!
                    보안에 민감한 데이터는 저장하면 안됨.(주민번호, 신용카드 번호등등)


            쿠키 - 생명주기
                Expires , max-age
                Set-Cookie: expires=Sat, 26-Dec-2020 00:00:00 GMT
                    만료일이 되면 쿠키 삭제
                Set-Cookie: max-age=3600 (3600초)
                    0이나 음수를 지정하면 쿠키 삭제
                세션 쿠키 :  만료 날짜를 생략하면 브라우저 종료시까지만 유지된다.
                영속 쿠키 :  만료 날짜를 입력하면 해당 날짜까지 유지됨.
            
            쿠키 - 도메인
                ->  내가 지정한 쿠키가 아무 사이트에 들어갈때마다 생성되면 큰일나기때문에 도메인을 지정해줄수있다
                예) domain=example.org
                명시 : 명시한 문서 기준 도메인 + 서브 도메인포함 다 전송함
                    domain=example.org를 지정해서 쿠키 생성
                    example.org는 물론이고
                    dev.example.org도 쿠키접근
                생략: 현재 문서 기준 도메인만 적용
                    example.org에서 쿠키를 생성하고 domain 지정을 생략
                    example.org에서만 쿠키접근
                    dev.example.org는 쿠키 접근안됨

            쿠키 - 경로
                ->  예) path=/home
                    이 경로를 포함한 하위 경로 페이지만 쿠키접근
                    일반적으로 path=/ 루트로 지정

                    예)
                        path=/home 지정
                            /home 가능
                            /home/level1 가능
                            /home/level1/level2 가능
                            /hello 불가능

            쿠키 - 보안
                ->   Secure
                        쿠키는 http,https를 구분하지 않고 전송하지만, Secure를 적용하면 https인 경우에만 전송
                     httpOnly
                        XSS공격 방지
                        자바스크립트에서 원래 쿠키를 접근할수있지만 httpOnly는 쿠키에 접근불가(document.cookie)
                        HTTP 전송에만 사용 
                     SameSite
                        XSRF 공격 방지
                        요청 도메인과 쿠키에 설정된 도메인이 같은 경우만 쿠키 전송