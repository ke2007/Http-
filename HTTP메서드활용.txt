클라이언트에서 서버로 데이터 전송
    ->  크게 2가지
            쿼리 파라미터를 통한 데이터 전송
                ->  GET
                ->  주로 정렬 필터(검색어)
            메시지 바디를 통한 데이터 전송
                ->  POST,PUT,PATCH
                ->  회원가입, 상품주문, 리소스등록, 리소스변경


    4가지 상황
        ->  정적 데이터 조회
                이미지,정적텍스트문서 조회는 GET사용
                정적데이터는 쿼리파라미터 없이 리소스경로로 단순하게 조회가능
                ->  GET /static/star.jpg HTTP/1.1
                    Host: localhost:8080

                /static/star.jpg 에서는

                    HTTP/1.1 200 OK
                    Content-Type: image/jpeg
                    Content-Length: 34012

                    asdf42341df34t14512341;13423;13413;
                    df134f134f134;f1341353;

        ->  동적 데이터 조회
                주로 검색, 게시판 목록에서 정렬필터(검색어)
                조회 조건을 줄여주는 필터, 조회 결과를 정렬하는 정렬 조건에 주로 사용
                조회는 GET사용
                GET은 쿼리 파라미터를 사용해서 데이터를 전달
                ->  GET /search?q=hello&hl=ko HTTP/1.1
                    Host: www.google.com

                    서버에선 쿼리 파라미터를 기반으로 정렬필터해서 결과를 동적으로 생성
                
        ->  HTML Form을 통한 데이터 전송
        HTML Form submit시 POST전송
        회원가입, 상품주문, 데이터변경
        Content-Type:application/x-www-form-urlencoded 사용
            form의 내용을 메시지 바디를 통해서 전송(key=value, 쿼리 파라미터 형식)
            전송 데이터를 url encoding처리
                예 ) abc김 -> abc%EA%B9%80
        HTML Form은 GET 전송도 가능
        Content-Type: multipart/form-data
            파일 업로드 같은 바이너리 데이터 전송시 사용
            다른 종류의 여러 파일과 폼의 내용 함께 전송가능( 그래서 이름이 multipart )
        
        ☆참고 : HTML Form 전송은 GET,POST만 지원한다!



        <form action="/save" method="post">
            <input type="text" name="username" />
            <input type="text" name="age" />
            <button type="submit">전송</button>
        </form>

        서밋 버튼을 눌렀을때 웹브라우저가 생성한 요청 HTTP 메시지
            POST /save HTTP/1.1
            Host: localhost:8080
            Content-Type:application/x-www-form-urlencoded

            username=kim&age=20

        -> GET으로도 바꿀수 있다 .
            GET /save?username=kim&age=20 HTTP/1.1
            Host: localhost:8080
            ※주의! GET은 조회에만 사용!!!! save같은 리소스변경이 발생하는곳에 사용하면 안됨!
            GET /members?username=kim&age=20 HTTP/1.1
            Host: localhost:8080

            멤버를 조회하는경우는 GET사용
        multipart/form-data
            바이너리데이터들이랑 같이 전송할때 사용

        -> HTTP API를 이용한 데이터 전송
            POST /members HTTP/1.1
            Content-Type: application/json
            {
                "username":"young", 
                "age": 20
            }

            서버 to 서버
                백엔드 시스템 통신
            앱 클라이언트에서 사용
                아이폰, 안드로이드
            웹 클라이언트
                HTML에서 Form 전송 대신 자바스크립트를 통한 통신에 사용(AJAX)
                예)  React, VueJS같은 웹 클라이언트와 API통신
            POST,PUT,PATCH: 메시지 바디를 통해 데이터 전송
            GET:조회, 쿼리 파라미터로 데이터 전달
            Content-Type: application/json을 주로 사용 (사실상 표준)            
                TEXT,XML,JSON 등등
    
    HTTP API 설계 예시
        ->  HTTP API - 컬렉션
                ->  POST 기반 등록
                    예) 회원관리 API제공
            HTTP API - 스토어
                ->  PUT 기반 등록
                    예) 정적 컨텐츠 관리, 원격 파일 관리
            HTML FORM 사용
                웹페이지 회원관리
                GET, POST만 지원
        

        회원관리 시스템 - API설계 - POST기반 등록
            ->  회원 목록 /members -> GET
                회원 등록 /members -> POST
                회원 조회 /members/{id} -> GET
                회원 수정 /members/{id} -> PATCH,PUT,POST
                회원 삭제 /members/{id} -> DELETE

            ->  POST- 신규 자원 등록 특징
                    ->  클라이언트는 등록될 리소스의 URI를 모른다.
                        ->  회원등록 /members -> POST
                            POST /members
                    ->  서버가 새로 등록된 리소스 URI를 생성해준다.
                        ->  HTTP/1.1 201 Created
                            Lcation: /members/100 <- *이부분
                    ->  컬렉션(Collection)
                        ->  서버가 관리하는 리섹스 디렉토리
                            서버가 리소스의 URI를 생성하고 관리
                            여기서 컬렉션은 /members

        파일관리 시스템 - API설계 PUT기반 등록
            ->  파일 목록 /files -> GET
                파일 조회 /files/{filename} -> GET
                파일 등록 /files/{filename} -> PUT
                파일 삭제 /files/{filename} -> DELETE
                파일 대량 등록 /files -> POST

            -> PUT - 신규자원 등록의 특징
                클라이언트가 리소스 URI를 알고 있어야 한다. <-> POST는 서버가 알아서 URI 만듦
                    파일등록 /files/{filename}  -> PUT
                    PUT /files/star.jpg <-처럼 파일이름을 지정해야함
                클라이언트가 직접 리소스의 URI를 지정한다.  <-> POST는 서버가 알아서 URI 만듦
                스토어(Store)
                    클라이언트가 관리하는 리소스 저장소
                    클라이언트가 리소스의URI를 알고 관리
                    여기서 스토어는 /files <-라는 리소스 경로가 된다.
        
        HTML FORM사용
            HTML FORM은 GET,POST만 지원
            AJAX같은 기술을 사용해서 해결가능 - > 회원API 참고
            여기서는 순수 HTML, HTML FORM이야기
            GET,POST만 지원하므로 제약이 있음.

            회원 목록   /members                -> GET
            회원 등록 폼/members/new            -> GET
            회원 등록   /members/new, /members -> POST
            회원 조회   /members/{id}           -> GET
            회원 수정 폼/members/{id}/edit      -> GET
            회원 수정   /members/{id}/edit, /members/{id} -> POST
            회원 삭제   /members/{id}/delete    -> POST

            -> HTML FORM은 GET,POST만 지원한다.

            컨트롤 URI
                ->  GET, POST만 지원하므로 제약이 있음
                    이런 제약을 해결하기 위해 동사로 된 리소스 경로 사용
                    POST의 /new, /edit, /delete 가 컨트롤URI
                    HTTP메서드로 해결하기 애매한 경우 사용 ( HTTP API 포함 )
            
            참고하면 좋은 URI 설계 개념
                문서
                    단일개념(파일하나, 객체 인스턴스, 데이터베이스row)
                    예) /members/100, /files/star.jpg
                컬렉션
                    서버가 관리하는 리소스 디렉터리
                    서버가 리소스의 URI를 생성하고 관리
                    예) /members
                스토어
                    클라이언트가 관리하는 자원저장소
                    클라이언트가 리소스의 URI를 알고 관리
                    예) /files
                컨트롤러, 컨트롤URI
                    문서, 컬렉션, 스토어로 해결하기 어려운 추가 프로세스 실행
                    동사를 직접 사용
                    예) /members/{id}/delete
