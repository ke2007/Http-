HTTP (HyperText Transfer Protocol)
    
    모든 것이 HTTP
        ->  HTTP 메시지에 모든 것을 전송
        ->  HTML, TEXT
        ->  IMAGE , 음성, 영상, 파일
        ->  JSON,XML(API)
        ->  거의 모든 형태의 데이터 전송 가능
        ->  서버간에 데이터를 주고 받을 때도 대부분 HTTP 사용(TCP를 직접연결해서 하는경우는 게임서버나 특수한 경우 정도)
        ->  모바일게임또한 HTTP통신으로 개발
        ->  시간이 흐르면서 모든것을 전송할 수 있도록 바뀜.
    
    HTTP의 역사
        ->  0.9버전
            1.0버전
            1.1버전 -> 가장 많이사용 대부분의 기능 포함
                RFC2068(1997) -> RFC2616(1999) -> RFC7230~7235(2014)
            2.0버전 -> 성능개선
            3.0버전 -> 진행중 : TCP 대신 UDP사용 , 성능개선
    
    기반 프로토콜
        TCP : HTTP/1.1, HTTP/2
        UDP : HTTP/3
        현재 HTTP/1.1 주로 사용
            ->2, 3도 점점증가
    
    HTTP 특징
        클라이언트 서버 구조
        무상태 프로토콜(Stateless), 비연결성
        HTTP메시지를 통해 통신
        단순함, 확장가능
    
    클라이언트 서버 구조
        Rqeust Responese 구조
        클라이언트는 서버에 요청을 보내고, 응답을 대기
        서버가 요청에 대한 결과를 만들어서 응답

        클라이언트 : 1. 요청 -> 서버 : 2. 응답

        클라이언트와 서버를 개념적으로 분리,
        비즈니스 로직, 데이터는 서버에 밀어넣고
        클라이언트는 사용성과 UI/UX에 집중
            -> 각각 독립적으로 진화를 할 수있다.

    무상태 프로토콜
        ->  Stateless
            서버가 클라이언트의 상태를 보존하지 않는다 -> 이게무슨말?

            예제(Stateful)

            ->  고객 : 이 '노트북' 얼마죠?
                점원 : 100만원 입니다. ( '노트북' 상태 유지)

                고객 : '2개' 살게요
                점원 : 200만원입니다, 카드 현금중에 뭘로 구매하시나요('노트북', '2개' 상태 유지)

                고객 : 신용카드요
                점원 : 200만원 결제할게요('노트북','2개','신용카드' 상태 유지)

               ---------중간에 점원이 바뀐다------

               고객 : 이 '노트북' 얼마죠?
                점원A : 100만원 입니다.

                고객 : 노트북 2개 살게요
                점원B : ? 뭘 2개 구매하시나요??

                고객 : 신용카드요
                점원C : ? 무슨제품 몇개를 신용카드로 구매하시나요??

                -> 중간에 다른 점원으로 바뀐다면 ??.. 망함.. 본인이 원하는 데이터가 없음..

            예제(Stateless)

            ->  고객 : 이 '노트북' 얼마죠?
                점원 : 100만원 입니다.

                고객 : '노트북' '2개' 살게요
                점원 : 노트북 2개는 200만원 입니다. '신용카드','현금'중 어떤 걸로 구매 하시겠어요?

                고객 : '노트북' '2개'를 '신용카드'로 구매하겠습니다.
                점원 : 200만원 결제 완료되었습니다.
                

                ---------중간에 점원이 바뀐다------


                고객 : 이 '노트북' 얼마죠?
                점원A : 100만원 입니다.

                고객 : '노트북' '2개' 살게요
                점원B : 노트북 2개는 200만원 입니다. '신용카드','현금'중 어떤 걸로 구매 하시겠어요?

                고객 : '노트북' '2개'를 '신용카드'로 구매하겠습니다.
                점원C : 200만원 결제 완료되었습니다.

                -> 고객이 필요한 데이터를 그때그때 넘겨준다!

        정리
            ->  Stateful : 중간에 다른 점원으로 바뀌면 안된다../상태정보를 다른 점원에게 미리 알려줘야한다.
            ->  Stateless : 중간에 다른 점원으로 바뀌어도 된다.
                            갑자기 고객이 증가해도 점원을 대거 투입할 수 있다.
                            갑자기 클라이언트 요청이 증가해도 서버를 대거 투입할 수 있다.
                            응답서버를 쉽게쉽게 바꿀 수 있다 : 무한 서버증식 가능( 스케일아웃 - 수평확장에 유리 )

        Stateless의 실무한계
            ->  모든것을 무상태로 설계 할 수도 있고 없는 경우도 있다.

                무상태
                    -> 로그인이 필요없는 단순한 서비스 소개화면
                상태유지
                    -> 로그인
                
                로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지
                일반적으로 브라우저 쿠키와 서버 세션등을 사용해서 상태유지
                상태 유지는 최소한만 사용 꼭 필요한 경우에만 어쩔수 없이..

                ++ 데이터를 너무 많이 보내야한다..

     비연결성
        ->  HTTP는 기본이 연결을 유지하지 않는 모델
            일반적으로 초 단위 이하의 빠른속도로 응답함
            1시간 동안 수천명이 서비스를 사용해도 실제 서버에서 동시에 처리하는 요청은 수십개 이하로 매우 작음
                -예 : 웹 브라우저에서 연속해서 검색버튼을 누르지는 않는다.
            서버 자원을 매우 효율적으로 사용할 수 있음.

        단점
            ->  TCP/IP연결을 새로 맺어야함 = 3 way handshake 시간 추가
            ->  사이트를 요청하면 HTML 뿐만 아니라 JS,CSS,추가 이미지등등 수많은 자원이 함께 다운로드
            ->  지금은 HTTP 지속연결(Persistent Connecetions)로 문제 해결 / 옛날엔 keep alive
            ->  http/2, http/3에선 더 많은 최적화

            지속연결
                -> 요청 후 몇 초간 대기
    Stateless를 기억하자
        ->서버개발자들의 어려운 업무
            ->  같은 시간에 딱 맞추어 발생하는 대용량 트래픽
                선착순 이벤트, 명절KTX예약, 수강신청
                이벤트 설계시 순수HTML 정적페이지에서 이벤트 버튼 클릭전 대기시간을 늘림..무상태로 갈 수 있는건 최대한 무상태로
    
    HTTP 메시지
        -> 요청메시지                                               HTTP 메시지 구조 
                GET /serch?q=hello&hl=ko HTTP/1.1                   ->  start-line 시작라인
                Host:www.google.com                                 ->  header 헤더
                공백                                                ->  empty line 공백라인(CRLF)
                message body(요청메시지도 body 본문을 가질 수 있다.) ->  message body

        HTTP-message = start-line
                        *( header-field CRLF(엔터한번))
                        CRLF(엔터한번)
                        [ message-body]

    시작 라인
         HTTP-message = start-line
                        *( header-field CRLF(엔터한번))
                        CRLF(엔터한번)
                        [ message-body]
    

      요청 메시지
        start-line = Rqeust-line 
        request-line = method(1.HTTP 메서드 : GET) SP(공백) request-Target(2.요청 대상) SP(공백) HTTP-version(2.HTTP 버전) CRLF(엔터한번)


        HTTP 메서드
            종류 : GET, POST, PUT, DELETE ...
            서버가 수행해야 할 동작 지정
            GET : 리소스 조회( 서버야 리소스 좀 줄래)
            POST : 요청 내역 처리(서버야 리소스 줄테니까 니가 처리 좀 해줄래)

        요청 대상
            absolute-path[?query] (절대경로[?쿼리])
            절대경로 = "/" 로 시작하는 경로
            참고: " *,http://...?x=y 와 같이 다른 유형의 경로지정 방법도 있다. 

        HTTP 버전
            HTTP 버전을 적어준다

    시작 라인
         HTTP-message = start-line
                        *( header-field CRLF(엔터한번))
                        CRLF(엔터한번)
                        [ message-body]

      응답 메시지
        start-line = status-line
        status-line = HTTP-version(1. HTTP 버전) SP status-code (2. HTTP 상태 코드) SP reason-phrase(3. 이유 문구) CRLF

      HTTP 헤더
        herder-field = field-name(Host,host 상관없다, 당연히 value는 대소문자 구분) ":" OWS(띄어쓰기를 허용) field-value OWS field-value OWS
        field-name은 대소문자 구문 없음
        HTTP 전송에 필요한 모든 부가정보
            ->메시지 바디의 내용(HTML임, XML임), 메시지 바디의 크기(body크기 얼마임), 압축(압축되어있음.), 인증, 요청 클라이언트(크롬임),서버 애플리케이션, 캐시관리정보 등등
        표준 헤더가 너무많음
        필요시 임의의 헤더 추가 가능
            ->ex: helloworld : hihi //약속한 서버와 클라이언트라면 이해하는 헤더

      HTTP 메시지 바디의
        ->  실제 전송할 데이터
        ->  HTML 문서 , 이미지, 영상, json등등 byte로 표현할 수 있는 모든 데이터
     

        
        
    








