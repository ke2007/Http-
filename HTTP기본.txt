HTTP (HyperText Transfer Protocol)
    
    모든 것이 HTTP
        ->  HTTP 메시지에 모든 것을 전송
        ->  HTML, TEXT
        ->  IMAGE , 음성, 영상, 파일
        ->  JSON,XML(API)
        ->  거의 모든 형태의 데이터 전송 가능
        ->  서버간에 데이터를 주고 받을 때도 대부분 HTTP 사용(TCP를 직접연결해서 하는경우는 게임서버나 특수한 경우 정도)
        ->  모바일게임또한 HTTP통신으로 개발
        ->  시간이 흐르면서 모든것을 전송할 수 있도록 바뀜.
    
    HTTP의 역사
        ->  0.9버전
            1.0버전
            1.1버전 -> 가장 많이사용 대부분의 기능 포함
                RFC2068(1997) -> RFC2616(1999) -> RFC7230~7235(2014)
            2.0버전 -> 성능개선
            3.0버전 -> 진행중 : TCP 대신 UDP사용 , 성능개선
    
    기반 프로토콜
        TCP : HTTP/1.1, HTTP/2
        UDP : HTTP/3
        현재 HTTP/1.1 주로 사용
            ->2, 3도 점점증가
    
    HTTP 특징
        클라이언트 서버 구조
        무상태 프로토콜(Stateless), 비연결성
        HTTP메시지를 통해 통신
        단순함, 확장가능
    
    클라이언트 서버 구조
        Rqeust Responese 구조
        클라이언트는 서버에 요청을 보내고, 응답을 대기
        서버가 요청에 대한 결과를 만들어서 응답

        클라이언트 : 1. 요청 -> 서버 : 2. 응답

        클라이언트와 서버를 개념적으로 분리,
        비즈니스 로직, 데이터는 서버에 밀어넣고
        클라이언트는 사용성과 UI/UX에 집중
            -> 각각 독립적으로 진화를 할 수있다.

    무상태 프로토콜
        ->  Stateless
            서버가 클라이언트의 상태를 보존하지 않는다 -> 이게무슨말?

            예제(Stateful)

            ->  고객 : 이 '노트북' 얼마죠?
                점원 : 100만원 입니다. ( '노트북' 상태 유지)

                고객 : '2개' 살게요
                점원 : 200만원입니다, 카드 현금중에 뭘로 구매하시나요('노트북', '2개' 상태 유지)

                고객 : 신용카드요
                점원 : 200만원 결제할게요('노트북','2개','신용카드' 상태 유지)

               ---------중간에 점원이 바뀐다------

               고객 : 이 '노트북' 얼마죠?
                점원A : 100만원 입니다.

                고객 : 노트북 2개 살게요
                점원B : ? 뭘 2개 구매하시나요??

                고객 : 신용카드요
                점원C : ? 무슨제품 몇개를 신용카드로 구매하시나요??

                -> 중간에 다른 점원으로 바뀐다면 ??.. 망함.. 본인이 원하는 데이터가 없음..

            예제(Stateless)

            ->  고객 : 이 '노트북' 얼마죠?
                점원 : 100만원 입니다.

                고객 : '노트북' '2개' 살게요
                점원 : 노트북 2개는 200만원 입니다. '신용카드','현금'중 어떤 걸로 구매 하시겠어요?

                고객 : '노트북' '2개'를 '신용카드'로 구매하겠습니다.
                점원 : 200만원 결제 완료되었습니다.
                

                ---------중간에 점원이 바뀐다------


                고객 : 이 '노트북' 얼마죠?
                점원A : 100만원 입니다.

                고객 : '노트북' '2개' 살게요
                점원B : 노트북 2개는 200만원 입니다. '신용카드','현금'중 어떤 걸로 구매 하시겠어요?

                고객 : '노트북' '2개'를 '신용카드'로 구매하겠습니다.
                점원C : 200만원 결제 완료되었습니다.

                -> 고객이 필요한 데이터를 그때그때 넘겨준다!

        정리
            ->  Stateful : 중간에 다른 점원으로 바뀌면 안된다../상태정보를 다른 점원에게 미리 알려줘야한다.
            ->  Stateless : 중간에 다른 점원으로 바뀌어도 된다.
                            갑자기 고객이 증가해도 점원을 대거 투입할 수 있다.
                            갑자기 클라이언트 요청이 증가해도 서버를 대거 투입할 수 있다.
                            응답서버를 쉽게쉽게 바꿀 수 있다 : 무한 서버증식 가능( 스케일아웃 - 수평확장에 유리 )

        Stateless의 실무한계
            ->  모든것을 무상태로 설계 할 수도 있고 없는 경우도 있다.

                무상태
                    -> 로그인이 필요없는 단순한 서비스 소개화면
                상태유지
                    -> 로그인
                
                로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지
                일반적으로 브라우저 쿠키와 서버 세션등을 사용해서 상태유지
                상태 유지는 최소한만 사용 꼭 필요한 경우에만 어쩔수 없이..

                ++ 데이터를 너무 많이 보내야한다..

     비연결성
        










