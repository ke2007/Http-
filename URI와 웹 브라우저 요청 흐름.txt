URI (Uniform Resource Identifier)
    -> 리소스를 식별하는 통합된 방법?! , URI , URL URN ? 
    -> URI는 로케이터(locater), 이름(Name) 또는 둘 다를 추가해서 분류할수있다.

    URI(Resource Identifier)의 포함관계
    -> URL(Resource locater) 리소스의 위치  , URN(Resource Name) 리소스의 이름  포함

    URL(Resource locater) 의 형태
        foo://example.com:8042/over/there?Name=ferret#nose
    URN(Resource Name) 의 형태 ( 매핑이 어렵기때문에 거의 안씀)
        urn:example:animal:ferret:nose

    URI
        Uniform : 리소스를 식별하는 통일된 방식
        Resource : 자원, URI로 식별할 수 있는 모든 것 ( 제한없음 )
        Identifier : 다른 항목과 구분하는데 필요한 정보 ( 주민번호로 식별한다? 그러면 주민번호가 Identifier가 됩니다~)

    URL과 URN
        URL -> ' 리소스가 여기있을거야~ '
        URN -> ' 리소스의 이름을 부여 '
        위치는 변할 수 있지만 , 이름은 변하지 않는다.

        URN 이름만으로 실제 리소스를 찾을 수 있는 방법 자체가 보편화 되어있지 않다. ( 사용이 어렵다! )

    URL을 분석해보자
        https://www.google.com/serch?q=hello&hl=ko

        -> q는 쿼리, hl은 언어,

    URL 전체 문법

        scheme://[userinfo]host[:port][/path][?query][#fragment]

        https://www.google.com:443/serch?q=hello&hl=ko

        프로토콜(https)
        호스트명(www.google.com)
        포트번호(443)
        패스(/serch)
        쿼리파라미터(q=hello&hl=ko)


        scheme(스키마)
            -> 주로 프로토콜(어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙, http, https, ftp등등)이 사용됨
            http는 80포트 , https는 443 포트를 주로 사용, 포트는 생략 가능.
            https는 http에 보안을 추가한것(HTTP Secure)

        userinfo( 거의 안씀)
            URL에 사용자 정보를 포함해서 인증
            거의 사용하지않음
        
        host
            호스트명
            도메인명 또는 IP주소를 직접 사용가능
        
        PORT
            접속 포트'
            일반적으로 생략시 http는 80 https 는 443
            특정서버에 따로 접근해야할땐 입력
        
        path
            리소스 경로(path), 계층적 구조
        
            예)
            /home/file1.jpg -> home 디렉토리의 file1.jpg
            /members -> 회원들에대한 어떤 정보를 보여주는 웹사이트
            /members/100 -> 100 번이라는 id의 회원

        query
            key=value의 형태로 구성
            ?로 시작, &로 추가 가능, ? keyA=valueA&keyB=valueB
            query parameter, query string(숫자를 적어도 다 문자로 넘어감) 등으로 불림, 웹서버에 제공하는 파라미터

        fragment
            html 내부 북마크 등에 사용( ex : 나무위키의 #1,#2 다이렉트)
            서버에 전송되는 정보가 아니다!